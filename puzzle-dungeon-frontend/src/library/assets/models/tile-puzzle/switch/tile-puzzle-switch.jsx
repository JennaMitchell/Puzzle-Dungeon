/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/models/tile-puzzle-switch.glb -0 src/tile-puzzle-switch.jsx -r public 
*/

import { useGLTF } from "@react-three/drei";
import { Outlines } from "@react-three/drei";

import { tilePuzzleSwitchPositionData } from "../data/switch-position-data";

import { useSpring, animated } from "@react-spring/three";
import { useState } from "react";
import { degreesToRadians } from "../../../../hooks/custom-project-hooks/degrees_to_radians";

export function TilePuzzleSwitch() {
  const { nodes, materials } = useGLTF("/models/tile-puzzle-switch.glb");
  const [moveTriggered, setMoveTriggered] = useState(false);
  const [switchHovered, setSwitchHovered] = useState(false);

  const { rotationX } = useSpring({
    from: {
      rotationX: tilePuzzleSwitchPositionData.switch.startingPosition.rotationX,
    },

    to: [
      {
        rotationX: moveTriggered
          ? tilePuzzleSwitchPositionData.switch.endingPosition.rotationX
          : tilePuzzleSwitchPositionData.switch.startingPosition.rotationX,
      },
    ],

    config: {
      mass: 100,
      friction: 1000,
    },
    onResolve: () => {},

    immediate: false,
  });

  const meshHoverHandler = () => {
    setSwitchHovered(!switchHovered);
  };

  const meshClickHandler = () => {
    setMoveTriggered(!moveTriggered);
  };

  return (
    <animated.group
      dispose={null}
      position-x={
        tilePuzzleSwitchPositionData.switch.startingPosition.positionX
      }
      position-y={
        tilePuzzleSwitchPositionData.switch.startingPosition.positionY
      }
      position-z={
        tilePuzzleSwitchPositionData.switch.startingPosition.positionZ
      }
      rotation-x={rotationX}
      onPointerEnter={meshHoverHandler}
      onPointerLeave={meshHoverHandler}
      onClick={meshClickHandler}
    >
      <mesh
        geometry={nodes["tile-puzzle-switch_v1"].geometry}
        material={materials.Base}
      >
        {switchHovered && <Outlines thickness={2} color="white" />}
      </mesh>
    </animated.group>
  );
}

useGLTF.preload("/models/tile-puzzle-switch.glb");
